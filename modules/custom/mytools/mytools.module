<?php
	use Drupal\user\Entity\User;
	use Drupal\node\NodeInterface;
	use Drupal\Core\Access\AccessResult;
	use Drupal\Core\Session\AccountInterface;
	use Drupal\Core\Entity\EntityInterface;
	use Drupal\node\Entity\Node;
	
	/**
	 * Implements hook_menu_links_discovered_alter().
	 */
	/*function mytools_menu_links_discovered_alter(&$links) {
	  $links['user.logout']['class'] = 'Drupal\mytools\Plugin\Menu\MyLoginLogoutMenuLink';
	}*/
	
	/** pour un point focal on doit permettre de rendre editable/supprimable que les contenus relatifs à l'organisation de ce point focal.
	* Cf aussi les droits backend "Modifier n'importe quel ..." et  "Supprimer n'importe quel ...."
	*/
	function mytools_entity_access(EntityInterface $entity, $operation, AccountInterface $account) {
		$type = $entity->bundle();
		
		switch ($operation) {
			case 'update':
			case 'delete':
				
				$user = \Drupal\user\Entity\User::load(\Drupal::currentUser()->id());
				
				if ($user->hasRole('point_focal') )
				{
				  $user_org_id = isset($user->get('field_user_organisation')->getValue()[0]['target_id']) ? $user->get('field_user_organisation')->getValue()[0]['target_id'] : false; 
				  
				  if ($type == 'organisation_membre')		  
					return ($user_org_id === $entity->id() ? AccessResult::neutral() : AccessResult::forbidden());
				  elseif (in_array($type, array('article', 'document', 'projet')))
				  {
					$entity_org_id = null;
					if (isset($entity->field_article_organisation->target_id))
						$entity_org_id = $entity->field_article_organisation->target_id;
					elseif (isset($entity->field_document_organisation->target_id))
						$entity_org_id = $entity->field_document_organisation->target_id;
					elseif (isset($entity->field_projet_organisation->target_id))
						$entity_org_id = $entity->field_projet_organisation->target_id;
					return ($user_org_id === $entity_org_id ? AccessResult::neutral() : AccessResult::forbidden());
				
				  }
				  elseif ($type == 'user'){	  
					$user = \Drupal\user\Entity\User::load($entity->id());
					$user_id_org = isset($user->get('field_user_organisation')->getValue()[0]['target_id']) ? $user->get('field_user_organisation')->getValue()[0]['target_id'] : false; 
					return ($user_org_id === $user_id_org ? AccessResult::neutral() : AccessResult::forbidden());
				  }
				}
				 
				break;
			 
		}
	  
	  // No opinion.
	  return AccessResult::neutral();
	}

	/** If a current user, with "point focal" role, add a new organisation, 
	*  this latter will be automatically set as a value of his field_user_organisation field
	*/	
	function mytools_node_insert(NodeInterface $node) {
		\Drupal::logger('mytools')->notice("mytools_node_insert" );
		$type = $node->getType();
		
		switch($type){
			case 'organisation_membre':
				
				\Drupal::logger('mytools')->notice("mytools_node_insert type: ".$type );
				
				$nid = $node->id();
				\Drupal::logger('mytools')->notice("mytools_node_insert nid: ".$nid );
				
			
				$user = User::load(\Drupal::currentUser()->id());
				if ($user->hasRole('point_focal'))
				{
					$user->set('field_user_organisation', $nid);
					$user->save();
					\Drupal::logger('mytools')->notice("mytools_node_insert user point focal saved" );
				}
				\Drupal::logger('mytools')->notice("mytools_node_insert user saved" );
				
				break;
		}
	}
	
	/**
	* Pour un contenu associé à une organisation membre, faire une copie de mail au point focal
	*
	*/
	function mytools_mail_alter(&$message) 
	{
	  //\Drupal::logger('mytools')->notice("mytools_entity_org_id1" );
	// \Drupal::logger('mytools')->notice("mytools_entity_org_id11". '<pre><code>' . print_r($message['params'], TRUE) . '</code></pre>' );
	//// \Drupal::logger('mytools')->notice("mytools_entity_org_id22". '<pre><code>' . print_r($message['params']['nid'], TRUE) . '</code></pre>' );
	  if ($message['id'] == 'admin_content_notification_admin_content_notification_key' && isset($message['params']['nid']) )
	  {
		  //$body = $context['message'];
		  $nid = $message['params']['nid'];
		  $node = Node::load($nid);
		 // \Drupal::logger('mytools')->notice("mytools_entity_org_id2". '<pre><code>' . print_r($node, TRUE) . '</code></pre>' );
		  $type = $node->bundle();
		  $entity_org_id = null;
		  if ($type == 'organisation_membre'){
			$entity_org_id = $node->id();
		  }
		  elseif (in_array($type, array('article', 'document', 'projet')))
		  {
			if (isset($node->field_article_organisation->target_id))
				$entity_org_id = $node->field_article_organisation->target_id;
			elseif (isset($node->field_document_organisation->target_id))
				$entity_org_id = $node->field_document_organisation->target_id;
			elseif (isset($node->field_projet_organisation->target_id))
				$entity_org_id = $node->field_projet_organisation->target_id;
		  }
		  
		 // // \Drupal::logger('mytools')->notice("mytools_entity_org_id3: ".$entity_org_id );
		  if ($entity_org_id)
		  {
			$tab_users_point_focal = getUserOrganisationByRole($entity_org_id, 'point_focal');
			// \Drupal::logger('mytools')->notice("mytools_entity_org_id4: ". '<pre><code>' . print_r($tab_users_point_focal, TRUE) . '</code></pre>' );
			if (isset($tab_users_point_focal) && count($tab_users_point_focal))
			{
				$tab_mails_recipients = array();
				if (strpos($message['params']['bcc'], ";") !== false)
					$tab_mails_recipients = explode(";", $message['params']['bcc']);
				else
					$tab_mails_recipients = explode(",", $message['params']['bcc']);
				
				$message['to'] = implode(',', array_merge($tab_users_point_focal, $tab_mails_recipients));
				
				// \Drupal::logger('mytools')->notice("mytools_entity_org_id5: ". '<pre><code>' . print_r($message, TRUE) . '</code></pre>' );
			}
		  }  
	  }
	  elseif ($message['id'] == 'user_register_pending_approval' && isset($message['params']['account']) )
	  {		  
		\Drupal::logger('mytools')->notice("mytools_user_register_pending_approval");
		$account = $message['params']['account'];
		//$mail = $account->mail;
		//\Drupal::logger('mytools')->notice("mytools_entity_org_id2: ".$mail);
		$user_org_id = isset($account->get('field_user_organisation')->getValue()[0]['target_id']) ? $account->get('field_user_organisation')->getValue()[0]['target_id'] : '';
		\Drupal::logger('mytools')->notice("mytools_entity_org_id3: ".$user_org_id);
		  
		$tab_users_pt_focal_and_gestionnaire = array_merge(getUserOrganisationByRole($user_org_id, 'point_focal'), getUserRole('gestionnaire'));
		
		$mailer = \Drupal::service('plugin.manager.mail');

		$email = implode(',', $tab_users_pt_focal_and_gestionnaire);
		$sitename = \Drupal::config('system.site')->get('name');
		$params['context']['subject'] = $sitename. " : New user registered and pending";
		$params['context']['message'] = "Dear content manager,<br>There is a new user (".$message['to'].") registered and awaiting validation on the website.<br>"."Sincerly yours!";
		$params['email'] = $account->mail;

		$mailer->mail('mytools', 'subscribe', $email, \Drupal::currentUser()->getPreferredLangcode(), $params);
		   
	  }
	  elseif ($message['id'] == 'mytools_subscribe'  )
	  {
		$options = [
			'langcode' => \Drupal::currentUser()->getPreferredLangcode(),
		];
		$message['subject'] = t('@title', ['@title' => $message['params']['context']['subject']], $options);
		$message['body'][] = t('@body', ['@body' => $message['params']['context']['message']], $options);  

		$message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed; delsp=yes';
	
	  }	  
	  
	}
	
	/** 
	* Get info (mail, name, etc..) about a list of users for a specific role
	*/
	function getUserOrganisationByRole($org_id, $role_name='point_focal') { // rid = Role Id from users_roles table
		$query = Drupal::database()->select('users', 'u');
		$query->fields('d', array('mail'));
		$query->innerJoin('user__roles', 'r', 'r.entity_id = u.uid');
		$query->innerJoin('user__field_user_organisation', 'o', 'o.entity_id = u.uid');
		$query->innerJoin('users_field_data', 'd', 'd.uid = u.uid');
		$query->condition('o.field_user_organisation_target_id', $org_id);
		$query->condition('r.roles_target_id', $role_name);

		$result = $query->execute();

		$users = array();
		foreach ($result as $user) {
			$users[] = $user->mail;
		}

		return $users;
	}
	
	/** 
	* Get info (mail, name, etc..) about a list of users for a specific role
	*/
	function getUserRole($role_name='gestionnaire') { // rid = Role Id from users_roles table
		$query = Drupal::database()->select('users', 'u');
		$query->fields('d', array('mail'));
		$query->innerJoin('user__roles', 'r', 'r.entity_id = u.uid');
		$query->innerJoin('users_field_data', 'd', 'd.uid = u.uid');
		$query->condition('r.roles_target_id', $role_name);

		$result = $query->execute();

		$users = array();
		foreach ($result as $user) {
			$users[] = $user->mail;
		}

		return $users;
	}
